// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var host = "http://localhost:8888/api/v1";

function toRequestResult(json) {
  return Promise.resolve(/* Ok */Block.__(0, [json]));
}

function fetchWithJsonPayload(url, payload) {
  return fetch(url, Fetch.RequestInit[/* make */0](/* Post */2, {
                      "Content-Type": "application/json"
                    }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                return prim.json();
              }));
}

function selectRegisterRequestParams(request) {
  var registerDict = { };
  registerDict["email"] = request[/* email */0];
  registerDict["firstName"] = request[/* firstName */1];
  registerDict["lastName"] = request[/* lastName */2];
  registerDict["password"] = request[/* password */3];
  return registerDict;
}

function register(request, param) {
  return fetchWithJsonPayload(Curry._1(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "/users/register",
                                /* End_of_format */0
                              ])
                          ]),
                        "%s/users/register"
                      ]), host), selectRegisterRequestParams(request)).then(toRequestResult);
}

function selectLoginRequestParams(email, password) {
  var loginDict = { };
  loginDict["email"] = email;
  loginDict["password"] = password;
  return loginDict;
}

function login(email, password, param) {
  return fetchWithJsonPayload(Curry._1(Printf.sprintf(/* Format */[
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "/users/login",
                              /* End_of_format */0
                            ])
                        ]),
                      "%s/users/login"
                    ]), host), selectLoginRequestParams(email, password));
}

exports.host = host;
exports.toRequestResult = toRequestResult;
exports.fetchWithJsonPayload = fetchWithJsonPayload;
exports.selectRegisterRequestParams = selectRegisterRequestParams;
exports.register = register;
exports.selectLoginRequestParams = selectLoginRequestParams;
exports.login = login;
/* No side effect */
